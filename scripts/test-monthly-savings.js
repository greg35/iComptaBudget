#!/usr/bin/env node

// Script de test pour v√©rifier le calcul d'√©pargne mensuelle avec filtrage des comptes

const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

async function curlApi(url) {
  try {
    const { stdout, stderr } = await execAsync(`curl -s "${url}"`);
    if (stderr) {
      console.error('Curl stderr:', stderr);
      return null;
    }
    return JSON.parse(stdout);
  } catch (error) {
    console.error(`Erreur lors de l'appel √† ${url}:`, error.message);
    return null;
  }
}

async function testMonthlySavingsCalculation() {
  console.log('üßÆ Test du calcul d\'√©pargne mensuelle avec filtrage des comptes...\n');
  
  try {
    // 1. Tester l'API des pr√©f√©rences de comptes
    console.log('1Ô∏è‚É£ V√©rification des pr√©f√©rences de comptes...');
    const prefs = await curlApi('http://127.0.0.1:2113/api/account-preferences');
    if (prefs) {
      console.log(`‚úÖ ${prefs.length} pr√©f√©rences de comptes trouv√©es`);
      
      const includedInChecking = prefs.filter(p => p.includeChecking === true);
      console.log(`   üìä ${includedInChecking.length} comptes inclus dans les d√©penses:`);
      includedInChecking.forEach(p => {
        console.log(`      - ${p.accountName} (ID: ${p.accountId})`);
      });
    } else {
      console.log('‚ùå Impossible de r√©cup√©rer les pr√©f√©rences de comptes');
    }
    
    // 2. Tester l'API d'√©pargne mensuelle
    console.log('\n2Ô∏è‚É£ Test du calcul d\'√©pargne mensuelle...');
    const savingsData = await curlApi('http://127.0.0.1:2113/api/monthly-savings?months=3');
    if (savingsData && !savingsData.error) {
      console.log(`‚úÖ Donn√©es d'√©pargne calcul√©es pour ${savingsData.length} mois`);
      
      savingsData.forEach(month => {
        console.log(`\nüìÖ ${month.label} (${month.month}):`);
        console.log(`   üí∞ Total √©pargne: ${month.totalSavings.toFixed(2)}‚Ç¨`);
        
        const projects = Object.keys(month.projectBreakdown);
        if (projects.length > 0) {
          console.log(`   üìã R√©partition par projet (${projects.length} projets):`);
          projects.forEach(project => {
            const amount = month.projectBreakdown[project];
            console.log(`      - ${project}: ${amount.toFixed(2)}‚Ç¨`);
          });
        } else {
          console.log(`   üìã Aucun projet avec √©pargne ce mois`);
        }
      });
      
      // Calcul du total global
      const totalGlobal = savingsData.reduce((sum, month) => sum + month.totalSavings, 0);
      console.log(`\nüíé Total √©pargne sur ${savingsData.length} mois: ${totalGlobal.toFixed(2)}‚Ç¨`);
      
    } else {
      console.log(`‚ùå Erreur API √©pargne mensuelle:`, savingsData?.error || 'R√©ponse invalide');
    }
    
    // 3. Tester l'API des comptes avec filtrage
    console.log('\n3Ô∏è‚É£ Test des comptes filtr√©s pour les d√©penses...');
    const accounts = await curlApi('http://127.0.0.1:2113/api/accounts?filterType=checking');
    if (accounts && !accounts.error) {
      console.log(`‚úÖ ${accounts.length} comptes inclus dans les calculs de d√©penses:`);
      accounts.forEach(acc => {
        console.log(`   - ${acc.name} (${acc.type}): ${acc.balance.toFixed(2)}‚Ç¨`);
      });
    } else {
      console.log('‚ùå Impossible de r√©cup√©rer les comptes filtr√©s');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Ex√©cuter le test si appel√© directement
if (require.main === module) {
  testMonthlySavingsCalculation();
}

module.exports = { testMonthlySavingsCalculation };
